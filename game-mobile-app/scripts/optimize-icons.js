// Script để tối ưu hóa icons cho game mobile app
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// Cấu hình kích thước cho từng loại icon
const iconSizes = {
  tabs: {
    small: 24,   // 24x24px cho tab icons
    medium: 32,  // 32x32px cho @2x
    large: 48    // 48x48px cho @3x
  },
  buttons: {
    small: 20,   // 20x20px cho button icons
    medium: 24,  // 24x24px cho @2x
    large: 32    // 32x32px cho @3x
  }
};

// Đường dẫn folders
const folders = {
  tabs: './src/assets/icons/tabs',
  buttons: './src/assets/icons/buttons'
};

// Hàm resize và tối ưu hóa icon
async function optimizeIcon(inputPath, outputPath, size) {
  try {
    await sharp(inputPath)
      .resize(size, size, {
        kernel: sharp.kernel.lanczos3,
        fit: 'contain',
        background: { r: 0, g: 0, b: 0, alpha: 0 }
      })
      .png({
        compressionLevel: 9,
        adaptiveFiltering: true,
        force: true
      })
      .toFile(outputPath);
    
    console.log(`✅ Optimized: ${path.basename(outputPath)} (${size}x${size}px)`);
  } catch (error) {
    console.error(`❌ Error optimizing ${inputPath}:`, error.message);
  }
}

// Hàm xử lý một folder
async function processFolder(folderType, folderPath) {
  const sizes = iconSizes[folderType];
  
  if (!fs.existsSync(folderPath)) {
    console.log(`❌ Folder not found: ${folderPath}`);
    return;
  }

  const files = fs.readdirSync(folderPath).filter(file => 
    file.endsWith('.png') && !file.includes('_optimized')
  );

  console.log(`\n🔧 Processing ${folderType} icons in ${folderPath}:`);
  console.log(`Found ${files.length} icons: ${files.join(', ')}`);

  for (const file of files) {
    const inputPath = path.join(folderPath, file);
    const fileName = path.parse(file).name;
    
    // Tạo version nhỏ (primary size)
    const smallOutputPath = path.join(folderPath, `${fileName}_optimized.png`);
    await optimizeIcon(inputPath, smallOutputPath, sizes.small);

    // Tạo version @2x
    const mediumOutputPath = path.join(folderPath, `${fileName}_optimized@2x.png`);
    await optimizeIcon(inputPath, mediumOutputPath, sizes.medium);

    // Tạo version @3x
    const largeOutputPath = path.join(folderPath, `${fileName}_optimized@3x.png`);
    await optimizeIcon(inputPath, largeOutputPath, sizes.large);
  }
}

// Hàm tạo icon config file
function generateIconConfig() {
  const configContent = `// Icon Configuration for Game Mobile App
// Auto-generated by optimize-icons.js

// Tab Icons
export const TabIcons = {
  home: {
    default: require('./tabs/home_optimized.png'),
    active: require('./tabs/home_active_optimized.png'),
  },
  game: {
    default: require('./tabs/game_optimized.png'),
    active: require('./tabs/game_active_optimized.png'),
  },
  profile: {
    default: require('./tabs/profile_optimized.png'),
    active: require('./tabs/profile_active_optimized.png'),
  },
};

// Button Icons
export const ButtonIcons = {
  edit: require('./buttons/edit_optimized.png'),
  logout: require('./buttons/logout_optimized.png'),
  settings: require('./buttons/settings_optimized.png'),
  back: require('./buttons/back_optimized.png'),
};

// Helper function to get tab icon
export const getTabIcon = (tabName, isActive = false) => {
  const tab = TabIcons[tabName];
  if (!tab) return null;
  return isActive ? tab.active : tab.default;
};

// Helper function to get button icon
export const getButtonIcon = (buttonName) => {
  return ButtonIcons[buttonName] || null;
};

export default {
  TabIcons,
  ButtonIcons,
  getTabIcon,
  getButtonIcon,
};`;

  fs.writeFileSync('./src/assets/icons/icons.config.js', configContent);
  console.log('\n✅ Created icons.config.js');
}

// Hàm main
async function optimizeAllIcons() {
  console.log('🚀 Starting icon optimization...\n');
  
  // Kiểm tra Sharp
  try {
    const sharpVersion = sharp.versions;
    console.log(`📦 Sharp version: ${sharpVersion.sharp}`);
  } catch (error) {
    console.error('❌ Sharp not found. Please install: npm install sharp');
    return;
  }

  // Xử lý từng folder
  for (const [folderType, folderPath] of Object.entries(folders)) {
    await processFolder(folderType, folderPath);
  }

  // Tạo config file
  generateIconConfig();

  console.log('\n🎉 Icon optimization completed!');
  console.log('\n📋 Summary:');
  console.log('✅ All icons resized to mobile-optimized sizes');
  console.log('✅ Created @2x and @3x versions for Retina displays');
  console.log('✅ PNG compression applied');
  console.log('✅ icons.config.js generated for easy import');
  console.log('\n🚀 Ready to use in your React Native app!');
}

// Chạy script
if (require.main === module) {
  optimizeAllIcons().catch(console.error);
}

module.exports = { optimizeAllIcons }; 